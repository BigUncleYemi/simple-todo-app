{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["Form","_ref","handleAddTask","react_default","a","createElement","onSubmit","type","name","id","placeholder","value","style","padding","color","backgroundColor","border","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","tasks","bind","assertThisInitialized","handleRemoveTask","handleUpdateTask","e","document","getElementById","preventDefault","task","target","done","time","newTask","created","Date","toLocaleTimeString","setState","currState","concat","reset","alert","item","filter","_this2","className","src","logo","alt","App_Form","map","i","onClick","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"oRAIMA,SAAO,SAAAC,GAAA,IACXC,EADWD,EACXC,cADW,OAGXC,EAAAC,EAAAC,cAAA,QAAMC,SAAUJ,GACdC,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,KAAK,OAAOC,GAAG,OAAOC,YAAY,eACrDP,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,KAAK,OAAOC,GAAG,OAAOC,YAAY,eACrDP,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAASI,MAAM,WAAWC,MAAO,CAACC,QAAS,WAAYC,MAAO,UAAWC,gBAAiB,QAASC,OAAQ,aA+E5GC,cA1Eb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAM,CACTC,MAAO,IAETR,EAAKjB,cAAgBiB,EAAKjB,cAAc0B,KAAnBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACrBA,EAAKW,iBAAmBX,EAAKW,iBAAiBF,KAAtBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACxBA,EAAKY,iBAAmBZ,EAAKY,iBAAiBH,KAAtBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAPRA,6EAUJa,GACZ,GAAGC,SAASC,eAAe,QAAQvB,OAASsB,SAASC,eAAe,QAAQvB,MAAO,CACjFqB,EAAEG,iBACF,IAAMC,EAAOJ,EAAEK,OAAOD,KAAKzB,MACrB2B,EAAON,EAAEK,OAAOE,KAAK5B,MAGrB6B,EAAU,CAAChC,KAAM4B,EAAMK,SAFhB,IAAIC,MACCC,qBAC0BL,QAC5ChB,KAAKsB,SAAS,SAACC,GACb,MAAM,CACJlB,MAAOkB,EAAUlB,MAAMmB,OAAO,CAACN,OAGnCR,EAAEK,OAAOU,aAETC,MAAM,oBACNhB,EAAEG,0DAIWc,GACf3B,KAAKsB,SAAS,SAACC,GACb,MAAM,CACJlB,MAAOkB,EAAUlB,MAAMuB,OAAO,SAACd,GAAD,OAAUA,IAASa,gDAKtCA,GACVhB,SAASC,eAAe,QAAQvB,MASnCqC,MAAM,uBARNf,SAASC,eAAe,QAAQvB,MAAQsC,EAAKzC,KAC7CyB,SAASC,eAAe,QAAQvB,MAAQsC,EAAKX,KAC7ChB,KAAKsB,SAAS,SAACC,GACb,MAAM,CACJlB,MAAOkB,EAAUlB,MAAMuB,OAAO,SAACd,GAAD,OAAUA,IAASa,yCAQhD,IAAAE,EAAA7B,KAEAK,EAASL,KAAKI,MAAdC,MACP,OACExB,EAAAC,EAAAC,cAAA,OAAK+C,UAAU,OACbjD,EAAAC,EAAAC,cAAA,UAAQ+C,UAAU,cAChBjD,EAAAC,EAAAC,cAAA,OAAKgD,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCpD,EAAAC,EAAAC,cAAA,2BAGAF,EAAAC,EAAAC,cAACmD,EAAD,CAAMtD,cAAeoB,KAAKpB,gBAC1BC,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,UACGsB,EAAM8B,IAAI,SAACR,EAAMS,GAAP,OAAavD,EAAAC,EAAAC,cAAA,MAAIsD,QAAS,kBAAMR,EAAKpB,iBAAiBkB,IAAOW,IAAKF,GAAIT,EAAKzC,KAA9D,KAAsEyC,EAAKX,KAA3E,cAA4FW,EAAKV,KAAjG,IAAuGpC,EAAAC,EAAAC,cAAA,UAAQsD,QAAS,kBAAMR,EAAKrB,iBAAiBmB,IAAOrC,MAAO,CAACC,QAAS,WAAYC,MAAO,MAAOC,gBAAiB,QAASC,OAAQ,SAAjI,oBAlEzH6C,aCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASpC,SAASC,eAAe,SD2H3C,kBAAmBoC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.87135532.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst Form = ({\n  handleAddTask\n}) => (\n  <form onSubmit={handleAddTask}>\n    <input type=\"text\" name=\"task\" id=\"task\" placeholder=\"Enter Task\" />\n    <input type=\"time\" name=\"time\" id=\"time\" placeholder=\"Enter time\" />\n    <input type=\"submit\" value=\"Add Task\" style={{padding: '7px 20px', color: '#2b2c34', backgroundColor: 'white', border: 'none'}}/>\n  </form>\n);\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      tasks: []\n    }\n    this.handleAddTask = this.handleAddTask.bind(this);\n    this.handleRemoveTask = this.handleRemoveTask.bind(this);\n    this.handleUpdateTask = this.handleUpdateTask.bind(this);\n  }\n\n  handleAddTask(e){\n    if(document.getElementById('time').value && document.getElementById('task').value ){\n      e.preventDefault();\n      const task = e.target.task.value;\n      const done = e.target.time.value;\n      const date = new Date();\n      const time = date.toLocaleTimeString();\n      const newTask = {name: task, created: time, done };\n      this.setState((currState) => {\n        return{\n          tasks: currState.tasks.concat([newTask]),\n        }\n      })\n      e.target.reset();\n    }else{\n      alert('Task not Entered')\n      e.preventDefault();\n    }\n  }\n\n  handleRemoveTask(item){\n    this.setState((currState) => {\n      return{\n        tasks: currState.tasks.filter((task) => task !== item)\n      }\n    })\n  }\n\n  handleUpdateTask(item){\n    if( !document.getElementById('task').value ){\n      document.getElementById('task').value = item.name;\n      document.getElementById('time').value = item.done;\n      this.setState((currState) => {\n        return{\n          tasks: currState.tasks.filter((task) => task !== item)\n        }\n      })\n    }else{\n      alert('input is not empty')\n    }\n  }\n\n  render() {\n\n    const {tasks} = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            React Todo App\n          </p>\n          <Form handleAddTask={this.handleAddTask} />\n          <h3>Tasks</h3>\n          <ul>\n            {tasks.map((item, i) => <li onClick={() => this.handleUpdateTask(item)} key={i}>{item.name}  {item.done} - created {item.time} <button onClick={() => this.handleRemoveTask(item)} style={{padding: '3px 20px', color: 'red', backgroundColor: 'white', border: 'none'}}>del</button></li>)}\n          </ul>\n        </header>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}